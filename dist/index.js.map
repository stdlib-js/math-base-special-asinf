{
  "version": 3,
  "sources": ["../lib/poly_p.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666752099990845;\n\t}\n\treturn float64ToFloat32(0.16666752099990845 + float64ToFloat32(x * float64ToFloat32(0.07495300471782684 + float64ToFloat32(x * float64ToFloat32(0.04547002539038658 + float64ToFloat32(x * float64ToFloat32(0.024181311950087547 + float64ToFloat32(x * 0.04216320067644119)))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar sqrtf = require( '@stdlib/math-base-special-sqrtf' );\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar PI02F = require( '@stdlib/constants-float32-half-pi' );\nvar polyp = require( './poly_p.js' );\n\n\n// MAIN //\n\n/**\n* Computes the arcsine of a single-precision floating-point number.\n*\n* ## Method\n*\n* -   A polynomial of the form\n*\n*     ```tex\n*     x + x^3 P(x^2)\n*     ```\n*\n*     is used for \\\\(\\|x\\|\\\\) in the interval \\\\(\\[0, 0.5\\]\\\\). If \\\\(\\|x\\| > 0.5\\\\), it is transformed by the identity\n*\n*     ```tex\n*     \\operatorname{asinf}(x) = \\frac{\\pi}{2} - 2 \\operatorname{asinf}( \\sqrt{ (1-x)/2 } )\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain | # trials | peak    | rms     |\n*     |:-----------|:-------|:---------|:--------|:--------|\n*     | IEEE       | -1, 1  | 10^5     | 2.5e-7  | 5.0e-8  |\n*\n* @param {number} x - input value\n* @returns {number} arcsine (in radians)\n*\n* @example\n* var v = asinf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = asinf( 3.14/4.0 );\n* // returns ~0.903\n*\n* @example\n* var v = asinf( -3.14/6.0 );\n* // returns ~-0.551\n*\n* @example\n* var v = asinf( NaN );\n* // returns NaN\n*/\nfunction asinf( x ) {\n\tvar flag;\n\tvar sgn;\n\tvar ax;\n\tvar z;\n\n\tif ( isnanf( x ) ) {\n\t\treturn NaN;\n\t}\n\tx = float64ToFloat32( x );\n\tif ( x > 0.0 ) {\n\t\tsgn = 1;\n\t\tax = x;\n\t} else {\n\t\tsgn = -1;\n\t\tax = -x;\n\t}\n\tif ( ax > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( ax < 1.0e-4 ) {\n\t\treturn x;\n\t}\n\tif ( ax > 0.5 ) {\n\t\tz = float64ToFloat32( 0.5 * float64ToFloat32( 1.0 - ax ) );\n\t\tax = sqrtf( z );\n\t\tflag = 1;\n\t} else {\n\t\tz = float64ToFloat32( ax * ax );\n\t\tflag = 0;\n\t}\n\tz = float64ToFloat32( float64ToFloat32( polyp( z ) * float64ToFloat32( z * ax ) ) + ax ); // eslint-disable-line max-len\n\n\tif ( flag !== 0 ) {\n\t\tz = float64ToFloat32( z + z );\n\t\tz = float64ToFloat32( PI02F - z );\n\t}\n\tif ( sgn < 0 ) {\n\t\tz = -z;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = asinf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arcsine of a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-asinf\n*\n* @example\n* var asinf = require( '@stdlib/math-base-special-asinf' );\n*\n* var v = asinf( 0.0 );\n* // returns 0.0\n*\n* v = asinf( 3.14/4.0 );\n* // returns ~0.903\n*\n* v = asinf( -3.14/6.0 );\n* // returns ~-0.551\n*\n* v = asinf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,mBAEDF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,oBAAuBA,EAAiBE,EAAI,kBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnR,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAmB,QAAS,wCAAyC,EACrEC,EAAQ,QAAS,mCAAoC,EACrDC,EAAQ,IAiDZ,SAASC,EAAOC,EAAI,CACnB,IAAIC,EACAC,EACAC,EACAC,EAEJ,OAAKV,EAAQM,CAAE,EACP,KAERA,EAAIJ,EAAkBI,CAAE,EACnBA,EAAI,GACRE,EAAM,EACNC,EAAKH,IAELE,EAAM,GACNC,EAAK,CAACH,GAEFG,EAAK,EACF,IAEHA,EAAK,KACFH,GAEHG,EAAK,IACTC,EAAIR,EAAkB,GAAMA,EAAkB,EAAMO,CAAG,CAAE,EACzDA,EAAKR,EAAOS,CAAE,EACdH,EAAO,IAEPG,EAAIR,EAAkBO,EAAKA,CAAG,EAC9BF,EAAO,GAERG,EAAIR,EAAkBA,EAAkBE,EAAOM,CAAE,EAAIR,EAAkBQ,EAAID,CAAG,CAAE,EAAIA,CAAG,EAElFF,IAAS,IACbG,EAAIR,EAAkBQ,EAAIA,CAAE,EAC5BA,EAAIR,EAAkBC,EAAQO,CAAE,GAE5BF,EAAM,IACVE,EAAI,CAACA,GAECA,GACR,CAKAX,EAAO,QAAUM,IC5FjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_poly_p", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_main", "__commonJSMin", "exports", "module", "isnanf", "sqrtf", "float64ToFloat32", "PI02F", "polyp", "asinf", "x", "flag", "sgn", "ax", "z", "main"]
}
